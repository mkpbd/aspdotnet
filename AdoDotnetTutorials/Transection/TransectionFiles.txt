=============== Steps of Creating Distributed Transaction using ADO.NET: ===================

We need to follow the following five steps to implement distributed transactions in C#.

1. Create an Instance of TransactionScope class.
2. Open the connection.
3. Perform the DML (INSERT, UPDATE, and DELETE) operations as per your business requirements.
4. If all your DML (INSERT, UPDATE, and DELETE) operations are completed successfully, then mark the transaction as completed.
5. Dispose the TransactionScope object.
Note: If all the DML (INSERT, UPDATE, and DELETE) operations succeeded in a transaction scope, then call the Complete method on the TransactionScope object to indicate that the transaction was completed successfully.

==================== How to terminate a Distributed Transaction in C#? ================================

To terminate a distributed transaction in C#, we just need to call the Dispose method on the TransactionScope object. When we call the Dispose Method on the TransactionScope object, then the transaction is either committed or rolled back, depending on whether you called the Complete method or not:

If you called the Complete method on the TransactionScope object before its disposal, the transaction manager commits the transaction.
If you did not call the Complete method on the TransactionScope object before its disposal, the transaction manager rolls back the transaction.



===================== =====================
Connection
Command
DataReader
DataAdapter
DataSet
DataView