1.	Connect to the Database
2.	Prepare an SQL Command
3.	Execute the Command
Retrieve the results and display them in the application
And this is possible with the help of .NET Data Providers.


The point that you need to remember is depending on the provider, the ADO.NET objects (Connection, Command, DataReader, and DataAdapter) have a different prefix as shown below.

1. Connection – SQLConnection, OracleConnection, OleDbConnection, OdbcConnection, etc.
2. Command – SQLCommand, OracleCommand, OleDbCommand, OdbcCommand, etc.
3. DataReader – SQLDataReader, OracleDataReader, OleDbDataReader, OdbcDataReader, etc.
4. DataAdapter – SQLDataAdapter, OracleDataAdapter, OleDbDataAdapter, OdbcDataAdapter, etc.

DataSet:
The DataSet object in ADO.NET is not Provider-Specific. Once you connect to a database, execute the command, and retrieve the data into the .NET application. 
The data can then be stored in a DataSet and work independently of the database. So, it is used to access data independently from any data source. 
The DataSet contains a collection of one or more DataTable objects.



--------------------- Establish a connection to SQL Server database and create a table using ADO.NET -------------------------------
1. Command 
	Methods of SqlCommand Class in C#
	1.	BeginExecuteNonQuery(): This method initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this System.Data.SqlClient.SqlCommand.

	2.	Cancel(): This method tries to cancel the execution of a System.Data.SqlClient.SqlCommand.
	3.	Clone(): This method creates a new System.Data.SqlClient.SqlCommand object is a copy of the current instance.
	4. CreateParameter(): This method creates a new instance of a System.Data.SqlClient.SqlParameter object.
	5. ExecuteReader(): This method Sends the System.Data.SqlClient.SqlCommand.CommandText to the System.Data.SqlClient.SqlCommand.Connection and builds a System.Data.SqlClient.SqlDataReader.
	6. ExecuteScalar(): This method Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
	7. ExecuteNonQuery(): This method executes a Transact-SQL statement against the connection and returns the number of rows affected.
	8. Prepare(): This method creates a prepared version of the command on an instance of SQL Server.
	9. ResetCommandTimeout(): This method resets the CommandTimeout property to its default value.





	--------------------------------------------  ADO.NET SqlDataReader Class Properties in C#: --------------------------------------------

	1.	Connection: It gets the System.Data.SqlClient.SqlConnection associated with the System.Data.SqlClient.SqlDataReader.
	2.	Depth: It gets a value that indicates the depth of nesting for the current row.
	3.	FieldCount: It gets the number of columns in the current row.
	4.	HasRows: It gets a value that indicates whether the System.Data.SqlClient.SqlDataReader contains one or more rows.
	5.	IsClosed: It retrieves a Boolean value that indicates whether the specified System.Data.SqlClient.SqlDataReader instance has been closed.
	6	RecordsAffected: It gets the number of rows changed, inserted, or deleted by the execution of the Transact-SQL statement.
	7.	VisibleFieldCount: It gets the number of fields in the System.Data.SqlClient.SqlDataReader that is not hidden.
	8.	Item[String]: It gets the value of the specified column in its native format given the column name.
	9.	Item[Int32]: It gets the value of the specified column in its native format given the column ordinal.


	---------------------------------- ADO.NET SqlDataReader Class Methods in C#: ---------------------------------------------

	1.	Close(): It closes the SqlDataReader object.
	2.	GetBoolean(int i): It gets the value of the specified column as a Boolean. Here, parameter i is the zero-based column ordinal.
	3.	GetByte(int i): It gets the value of the specified column as a byte. Here, parameter i is the zero-based column ordinal.
	4.	GetChar(int i): It gets the value of the specified column as a single character. Here, parameter i is the zero-based column ordinal.
	5.	GetDateTime(int i): It gets the value of the specified column as a System.DateTime object. Here, parameter i is the zero-based column ordinal.
	6.	GetDecimal(int i): It gets the value of the specified column as a System.Decimal object. Here, parameter i is the zero-based column ordinal.
	7.	GetDouble(int i): It gets the value of the specified column as a double-precision floating-point number. Here, parameter i is the zero-based column ordinal.
	8.	GetFloat(int i): It gets the value of the specified column as a single-precision floating-point number. Here, parameter i is the zero-based column ordinal.
	9.	GetName(int i): It gets the name of the specified column. Here, parameter i is the zero-based column ordinal.
	10.	GetSchemaTable(): It returns a System.Data.DataTable that describes the column metadata of the System.Data.SqlClient.SqlDataReader
	11.	GetValue(int i): It gets the value of the specified column in its native format. Here, parameter i is the zero-based column ordinal.
	12.	GetValues(object[] values): It Populates an array of objects with the column values of the current row. Here, the parameter values is an array of System.Object into which to copy the attribute columns.
	13.	NextResult(): It advances the data reader to the next result when reading the results of batch Transact-SQL statements.
	14.	Read(): It Advances the System.Data.SqlClient.SqlDataReader to the next record and returns true if there are more rows; otherwise false.


