1.	Connect to the Database
2.	Prepare an SQL Command
3.	Execute the Command
Retrieve the results and display them in the application
And this is possible with the help of .NET Data Providers.


The point that you need to remember is depending on the provider, the ADO.NET objects (Connection, Command, DataReader, and DataAdapter) have a different prefix as shown below.

1. Connection – SQLConnection, OracleConnection, OleDbConnection, OdbcConnection, etc.
2. Command – SQLCommand, OracleCommand, OleDbCommand, OdbcCommand, etc.
3. DataReader – SQLDataReader, OracleDataReader, OleDbDataReader, OdbcDataReader, etc.
4. DataAdapter – SQLDataAdapter, OracleDataAdapter, OleDbDataAdapter, OdbcDataAdapter, etc.

DataSet:
The DataSet object in ADO.NET is not Provider-Specific. Once you connect to a database, execute the command, and retrieve the data into the .NET application. 
The data can then be stored in a DataSet and work independently of the database. So, it is used to access data independently from any data source. 
The DataSet contains a collection of one or more DataTable objects.



--------------------- Establish a connection to SQL Server database and create a table using ADO.NET -------------------------------
1. Command 
	Methods of SqlCommand Class in C#
	1.	BeginExecuteNonQuery(): This method initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this System.Data.SqlClient.SqlCommand.

	2.	Cancel(): This method tries to cancel the execution of a System.Data.SqlClient.SqlCommand.
	3.	Clone(): This method creates a new System.Data.SqlClient.SqlCommand object is a copy of the current instance.
	4. CreateParameter(): This method creates a new instance of a System.Data.SqlClient.SqlParameter object.
	5. ExecuteReader(): This method Sends the System.Data.SqlClient.SqlCommand.CommandText to the System.Data.SqlClient.SqlCommand.Connection and builds a System.Data.SqlClient.SqlDataReader.
	6. ExecuteScalar(): This method Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
	7. ExecuteNonQuery(): This method executes a Transact-SQL statement against the connection and returns the number of rows affected.
	8. Prepare(): This method creates a prepared version of the command on an instance of SQL Server.
	9. ResetCommandTimeout(): This method resets the CommandTimeout property to its default value.





	--------------------------------------------  ADO.NET SqlDataReader Class Properties in C#: --------------------------------------------

	1.	Connection: It gets the System.Data.SqlClient.SqlConnection associated with the System.Data.SqlClient.SqlDataReader.
	2.	Depth: It gets a value that indicates the depth of nesting for the current row.
	3.	FieldCount: It gets the number of columns in the current row.
	4.	HasRows: It gets a value that indicates whether the System.Data.SqlClient.SqlDataReader contains one or more rows.
	5.	IsClosed: It retrieves a Boolean value that indicates whether the specified System.Data.SqlClient.SqlDataReader instance has been closed.
	6	RecordsAffected: It gets the number of rows changed, inserted, or deleted by the execution of the Transact-SQL statement.
	7.	VisibleFieldCount: It gets the number of fields in the System.Data.SqlClient.SqlDataReader that is not hidden.
	8.	Item[String]: It gets the value of the specified column in its native format given the column name.
	9.	Item[Int32]: It gets the value of the specified column in its native format given the column ordinal.


	---------------------------------- ADO.NET SqlDataReader Class Methods in C#: ---------------------------------------------

	1.	Close(): It closes the SqlDataReader object.
	2.	GetBoolean(int i): It gets the value of the specified column as a Boolean. Here, parameter i is the zero-based column ordinal.
	3.	GetByte(int i): It gets the value of the specified column as a byte. Here, parameter i is the zero-based column ordinal.
	4.	GetChar(int i): It gets the value of the specified column as a single character. Here, parameter i is the zero-based column ordinal.
	5.	GetDateTime(int i): It gets the value of the specified column as a System.DateTime object. Here, parameter i is the zero-based column ordinal.
	6.	GetDecimal(int i): It gets the value of the specified column as a System.Decimal object. Here, parameter i is the zero-based column ordinal.
	7.	GetDouble(int i): It gets the value of the specified column as a double-precision floating-point number. Here, parameter i is the zero-based column ordinal.
	8.	GetFloat(int i): It gets the value of the specified column as a single-precision floating-point number. Here, parameter i is the zero-based column ordinal.
	9.	GetName(int i): It gets the name of the specified column. Here, parameter i is the zero-based column ordinal.
	10.	GetSchemaTable(): It returns a System.Data.DataTable that describes the column metadata of the System.Data.SqlClient.SqlDataReader
	11.	GetValue(int i): It gets the value of the specified column in its native format. Here, parameter i is the zero-based column ordinal.
	12.	GetValues(object[] values): It Populates an array of objects with the column values of the current row. Here, the parameter values is an array of System.Object into which to copy the attribute columns.
	13.	NextResult(): It advances the data reader to the next result when reading the results of batch Transact-SQL statements.
	14.	Read(): It Advances the System.Data.SqlClient.SqlDataReader to the next record and returns true if there are more rows; otherwise false.


	===================================== Constructors of ADO.NET SqlDataAdapter class in C#: =================================


1.	SqlDataAdapter(): Initializes a new instance of the SqlDataAdapter class.
2. SqlDataAdapter(SqlCommand selectCommand): Initializes a new instance of the SqlDataAdapter class with the specified SqlCommand. Here, the selectCommand can be a Transact-SQL SELECT statement or a stored procedure.
3. SqlDataAdapter(string selectCommandText, string selectConnectionString): Initializes a new instance of the SqlDataAdapter class with the command and a connection string. Here, the selectCommandText can be a Transact-SQL SELECT statement or a stored procedure.
4. SqlDataAdapter(string selectCommandText, SqlConnection selectConnection): Initializes a new instance of the SqlDataAdapter class with the command and a connection string. Here, the selectCommandText can be a Transact-SQL SELECT statement or a stored procedure. 
	If your connection string does not use Integrated Security = true, you can use System.Data.SqlClient.SqlCredential to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.


	========================================= Methods of ADO.NET SqlDataAdapter class in C#: ===========================================

	The C# SqlDataAdapter class provides the following methods.

1.	CloneInternals(): It is used to create a copy of this instance of DataAdapter.
2.	Dispose(Boolean): It is used to release the unmanaged resources used by the DataAdapter.
3.	Fill(DataSet): It is used to add rows in the DataSet to match those in the data source.
4.	FillSchema(DataSet, SchemaType, String, IDataReader): It is used to add a DataTable to the specified DataSet.
5.	GetFillParameters(): It is used to get the parameters set by the user when executing an SQL SELECT statement.
6.	ResetFillLoadOption(): It is used to reset FillLoadOption to its default state.
7.	ShouldSerializeAcceptChangesDuringFill(): It determines whether the
8.	ShouldSerializeFillLoadOption(): It determines whether the FillLoadOption property should be persisted or not.
9.	ShouldSerializeTableMappings(): It determines whether one or more DataTableMapping objects exist or not.
10	Update(DataSet): It is used to call the respective INSERT, UPDATE, or DELETE statements.


============================================ Let us discuss each of these constructors.  ============================================ 

Let us discuss each of these constructors.

DataTable(): This constructor is used to initialize a new instance of the System.Data.DataTable class with no arguments.
DataTable(string tableName): It is used to initialize a new instance of the System.Data.DataTable class with the specified table name. Here, the Parameters tableName is the name to give the table. If tableName is null or an empty string, a default name is given when added to the System.Data.DataTableCollection.
DataTable(SerializationInfo info, StreamingContext context): This constructor is used to initialize a new instance of the System.Data.DataTable class with the System.Runtime.Serialization.SerializationInfo and the System.Runtime.Serialization.StreamingContext. Here, the parameter info specifies the data needed to serialize or deserialize an object and the parameter context specifies the source and destination of a given serialized stream.
DataTable(string tableName, string tableNamespace): It is used to initialize a new instance of the System.Data.DataTable class using the specified table name and namespace. Here, the parameter tableName specifies the name to give the table. If tableName is null or an empty string, a default name is given when added to the System.Data.DataTableCollection. The second parameter i.e. tableNamespace specifies the namespace for the XML representation of the data stored in the DataTable.

================================ Properties of ADO.NET DataTable in C#: =========================

The ADO.NET DataTable class in C# provides the following properties.

Columns: It is used to get the collection of columns that belong to this table.
Constraints: t is used to get the collection of constraints maintained by this table.
DataSet: It is used to get the DataSet to which this table belongs.
DefaultView: It is used to get a customized view of the table that may include a filtered view.
HasErrors: It is used to get a value indicating whether there are errors in any of the rows in the table of the DataSet.
MinimumCapacity: It is used to get or set the initial starting size for this table.
PrimaryKey: It is used to get or set an array of columns that function as primary keys for the data table.
Rows: It is used to get the collection of rows that belong to this table.
TableName: It is used to get or set the name of the DataTable.


================================ Methods of C# DataTable in ADO.NET:    ==================================================

AcceptChanges(): It is used to commit all the changes made to this table.
Clear(): It is used to clear the DataTable of all data.
Clone(): It is used to clone the structure of the DataTable.
Copy(): It is used to copy both the structure and data of the DataTable.
CreateDataReader(): It is used to return a DataTableReader corresponding to the data within this DataTable.
CreateInstance(): It is used to create a new instance of DataTable.
GetRowType(): It is used to get the row type.
GetSchema(): It is used to get the schema of the table.
ImportRow(DataRow): It is used to copy a DataRow into a DataTable.
Load(IDataReader): It is used to fill a DataTable with values from a data source using the supplied IDataReader.
Merge(DataTable, Boolean): It is used to merge the specified DataTable with the current DataTable.
NewRow(): It is used to create a new DataRow with the same schema as the table.
Select(): It is used to get an array of all DataRow objects.
WriteXml(String): It is used to write the current contents of the DataTable as XML using the specified file.



=====================  DataColumn Properties ===================================

AllowDBNull: This property is used to get or set a value that indicates whether the column will accept null values or not.
Autoincrement: This property is used when you want to increment the column values automatically.
AutoincrementSeed: This property is used to get or set the starting value for the auto-incremented column.
AutoincrementStep: This property is used to get or set the increment used by a column with its Autoincrement property set to true.
Caption: his property is used to get or set the caption for the column.
ColumnName: This property is used to get or set the name of the column.
Expression: This property is used to get or set the expression used to filter rows, calculate the values in a column, or create an aggregate column.
MaxLength: This property is used to get or set the maximum length of a text column.
Unique: This property is used to get or set a value that indicates whether the values in each row of the column must be unique.